# -*- coding: utf-8 -*-
"""Data Visualization

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZMJniEjB_jZs78lhmBw9f1kpfKGfhzyC
"""

from google.colab import drive
import os

drive.mount('/content/drive')

shared_folder = '/content/drive/MyDrive/Ariya Narayanasamy/Data'
# shared_folder = '/content/drive/MyDrive/Data' # Landon's location of data
os.chdir(shared_folder)

import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D

"""## Nodes & Edges Dataframes"""

nodes_df = pd.read_pickle('Pickle Saves/tokyo_metro_nodes.pkl')
edges_df = pd.read_pickle('Pickle Saves/tokyo_metro_edges.pkl')

nodes_df.head()

edges_df

"""## Tests"""

# Nodes assertion
len(nodes_df['station_name']) == len(nodes_df['station_name'].drop_duplicates())

# Edges assertion
source_count = edges_df['source'].value_counts().reset_index(drop=True)
target_count = edges_df['target'].value_counts().reset_index(drop=True)

source_count.equals(target_count)

edges_df[edges_df['source'] == 'Ochiai']

"""## Graph"""

G = nx.DiGraph()

G.add_nodes_from([
    (row['station_name'], {
        col: row[col] for col in nodes_df.columns if col != 'station_name'
    }) for _, row in nodes_df.iterrows()
])

G.add_edges_from([
    (row['source'], row['target'], {
        key: value for key, value in row.items() if key not in ['source', 'target']
    }) for _, row in edges_df.iterrows()
])

undirectedG = G.to_undirected()

colors = {
    'Ginza': '#FF9500', 'Marunouchi': '#F62E36', 'Hibiya': '#B5B5AC',
    'Tozai': '#009BBF', 'Chiyoda': '#00BB85', 'Yurakucho': '#CE9200',
    'Hanzomon': '#6C3082', 'Namboku': '#00AC9B', 'Fukutoshin': '#9E5E31'
}

# undirectedG['Kasai']['Nishi-kasai'] also works
undirectedG['Nakano-shimbashi']['Nakano-sakaue']['line'] = 'Marunouchi'

plt.figure(figsize = (16, 9))

layout = {node: (node_data['longitude'], node_data['latitude']) for node, node_data in undirectedG.nodes(data = True)}
edge_colors = [colors[undirectedG[u][v]['line']] for u, v in undirectedG.edges()]

nx.draw(undirectedG, pos=layout, with_labels=False, node_size=50, node_color='#808080', font_size=10, edge_color=edge_colors)

# Legend code
legend_handles = [Line2D([0], [0], marker='o', color=color, markerfacecolor=color, markersize=8, label=line) for line, color in colors.items()]
plt.legend(handles=legend_handles, loc='upper right')

plt.tight_layout()
plt.show()

"""## Folium"""

import folium

m = folium.Map(location=[35.6895, 139.6917], zoom_start=12)

for i in range(0,len(nodes_df)):
   folium.Marker(
      location=[nodes_df.iloc[i]['latitude'], nodes_df.iloc[i]['longitude']],
      popup=nodes_df.iloc[i]['station_name'],
   ).add_to(m)

m

m = folium.Map(location=[35.6895, 139.6917], zoom_start=12)

for _, row in nodes_df.iterrows():
  if row['fare_gate_data_in']['W'] is not None:
    folium.CircleMarker(
      location = [row['latitude'], row['longitude']],
      radius = int(row['fare_gate_data_in']['W'][6] // 1000), # Weekday influx 8am (hardcoded)
      color = 'blue',
      fill = True,
      fill_color = 'lightblue',
      fill_opacity = 0.6,
      popup = nodes_df['station_name']
    ).add_to(m)

m

m = folium.Map(location=[35.6895, 139.6917], zoom_start=12)

for _, row in nodes_df.iterrows():
  if row['fare_gate_data_out']['W'] is not None:
    folium.CircleMarker(
      location = [row['latitude'], row['longitude']],
      radius = int(row['fare_gate_data_out']['W'][6] // 1000), # Weekday influx 8am (hardcoded)
      color = 'red',
      fill = True,
      fill_color = 'red',
      fill_opacity = 0.2,
      popup = nodes_df['station_name']
    ).add_to(m)

m

m = folium.Map(location=[35.6895, 139.6917], zoom_start=12.2)

def add_flux_bubble(row, flux):
  folium.CircleMarker(
    location = [row['latitude'], row['longitude']],
    radius = int(row[f'fare_gate_data_{flux}']['W'][6] // 1000), # Weekday influx 8am (hardcoded)
    color = 'blue' if flux == 'in' else 'red',
    fill = True,
    fill_color = 'blue' if flux == 'in' else 'red',
    fill_opacity = 0.2,
    popup = nodes_df['station_name']
  ).add_to(m)

def add_diff_flux_bubble(row, flux):
  folium.CircleMarker(
    location = [row['latitude'], row['longitude']],
    radius = int(abs(row[f'fare_gate_data_out']['W'][6] - row[f'fare_gate_data_in']['W'][6]) // 1000), # Weekday influx 8am (hardcoded)
    color = 'blue' if flux == 'in' else 'red',
    fill = True,
    fill_color = 'blue' if flux == 'in' else 'red',
    fill_opacity = 0.2,
    popup = nodes_df['station_name']
  ).add_to(m)

for _, row in nodes_df.iterrows():
  if row['fare_gate_data_in']['W'] is None and row['fare_gate_data_in']['W'] is None: continue
  elif row['fare_gate_data_in']['W'] is None: add_flux_bubble(row, 'out')
  elif row['fare_gate_data_out']['W'] is None: add_flux_bubble(row, 'in')
  else:
    flux = 'in' if row[f'fare_gate_data_in']['W'][6] > row[f'fare_gate_data_out']['W'][6] else 'out'
    add_diff_flux_bubble(row, flux)

m # 8 AM

m = folium.Map(location=[35.712654, 139.7618983], zoom_start=12.2) # Somewhere near the Bunkyo campus of Tokyo University

def add_flux_bubble(map, row, flux, time):
  folium.CircleMarker(
    location = [row['latitude'], row['longitude']],
    radius = int(row[f'fare_gate_data_{flux}']['W'][time] // 1000), # Weekday influx 8am (hardcoded)
    color = 'blue' if flux == 'in' else 'red',
    fill = True,
    fill_color = 'blue' if flux == 'in' else 'red',
    fill_opacity = 0.2,
    popup = nodes_df['station_name']
  ).add_to(map)

def add_diff_flux_bubble(map, row, flux, time):
  folium.CircleMarker(
    location = [row['latitude'], row['longitude']],
    radius = int(abs(row[f'fare_gate_data_out']['W'][time] - row[f'fare_gate_data_in']['W'][time]) // 1000),
    color = 'blue' if flux == 'in' else 'red',
    fill = True,
    fill_color = 'blue' if flux == 'in' else 'red',
    fill_opacity = 0.2,
    popup = nodes_df['station_name']
  ).add_to(map)

def add_influx_nodes(m, frame):
  for _, row in nodes_df.iterrows():
    if row['fare_gate_data_in']['W'] is None and row['fare_gate_data_in']['W'] is None: continue
    elif row['fare_gate_data_in']['W'] is None: add_flux_bubble(m, row, 'out', time = frame)
    elif row['fare_gate_data_out']['W'] is None: add_flux_bubble(m, row, 'in', time = frame)
    else:
      flux = 'in' if row[f'fare_gate_data_in']['W'][frame] > row[f'fare_gate_data_out']['W'][frame] else 'out'
      add_flux_bubble(m, row, flux, time = frame)

  return m

m = add_influx_nodes(m, frame = 6)
m # 7PM

"""## Install dependencies"""

!pip install selenium
!apt-get update
!apt install -y chromium-chromedriver

import sys
sys.path.insert(0,'/usr/lib/chromium-browser/chromedriver')

from selenium import webdriver

def init_selelium():
  chrome_options = webdriver.ChromeOptions()
  chrome_options.add_argument('--headless')
  chrome_options.add_argument('--no-sandbox')
  chrome_options.add_argument('--disable-dev-shm-usage')

  driver = webdriver.Chrome(options=chrome_options)
  driver.get('about:blank')
  driver.set_window_size(1920, 1080)

  return driver

import tempfile
import time
import os
import imageio
from IPython.display import display

"""## Node (influx bubbles)

temp_dir = tempfile.mkdtemp()

def generate_map_and_screenshot(driver, frame):
  m = folium.Map(location=[35.712654, 139.7618983], zoom_start=12, tiles='CartoDB Positron')
  m = add_influx_nodes(m, frame = frame)

  display(m)

  map_file = os.path.join(temp_dir, f"frame_{frame}.html")
  m.save(map_file)

  driver.get(f'file://{map_file}')
  driver.maximize_window()
  time.sleep(2)
  screenshot_file = os.path.join(temp_dir, f"frame_{frame}.png")
  driver.save_screenshot(screenshot_file)

num_frames = 40
for frame in range(num_frames):
    generate_map_and_screenshot(driver, frame)
driver.quit()

images = [imageio.imread(os.path.join(temp_dir, f"frame_{frame}.png")) for frame in range(num_frames)]
imageio.mimsave('folium_animation.gif', images, duration=0.1)

for file in os.listdir(temp_dir):
    os.remove(os.path.join(temp_dir, file))
os.rmdir(temp_dir)

Maybe try making the radius logarithmic, to emphasize the nodes with bigger influxes

## Nodes (but with matplotlib)
"""

import matplotlib.pyplot as plt
from matplotlib.animation import ArtistAnimation
from PIL import Image, ImageDraw, ImageFont

map_images = []
temp_dir = tempfile.mkdtemp()

driver = init_selelium()

font = ImageFont.truetype('Roboto-Regular.ttf', size = 42)
text_color = (0, 0, 0)

def generate_images(driver, frame, images):
  m = folium.Map(location=[35.712654, 139.7618983], zoom_start=12.5, tiles='CartoDB Positron')
  m = add_influx_nodes(m, frame = frame)

  map_file = os.path.join(temp_dir, f"frame_{frame}.html")
  m.save(map_file)

  driver.get(f'file://{map_file}')
  driver.maximize_window()
  time.sleep(2)

  screenshot_file = os.path.join(temp_dir, f"frame_{frame}.png")
  driver.save_screenshot(screenshot_file)

  image = Image.open(screenshot_file)

  draw = ImageDraw.Draw(image)
  text = f"Time {(frame // 2) + 5}:00" if frame % 2 == 0 else f"Time {(frame // 2) + 5}:30"
  position = (10, 10)  # Adjust the position (x, y) of the text
  draw.text(position, text, font=font, fill=text_color)

  display(image)

  images.append(image)
  return images

num_frames = 40

for frame in range(num_frames):
    map_images = generate_images(driver, frame, map_images)

driver.quit()

width = 1920
height = 1080

fig = plt.figure(figsize = (16, 9))

ax = plt.gca()
ax.axis('off')

artists = []

for image in map_images:
  artist = plt.imshow(image)
  artists.append([artist])

animation = ArtistAnimation(fig, artists, interval=1000, blit=True)
animation.save('folium_animation.gif', writer='pillow')

for file in os.listdir(temp_dir):
    os.remove(os.path.join(temp_dir, file))
os.rmdir(temp_dir)

"""## Edges (crowdedness thickness stuff)

def add_crowdedness_edge(m1, scoords1, scoords2, line, crowdedness):
  path = folium.PolyLine(
      locations = [scoords1, scoords2],
      color = colors[line],
      weight = 2 ** crowdedness, # Exponential to emphasize crowdedness, otherwise they're all thin
      opacity = 1
  )
  path.add_to(m1)
  return m1

def add_edges_from_frame(m3, frame):
  display(m3)

  for _, row in edges_df.iterrows():
    source = nodes_df[nodes_df['station_name'] == row['source']]
    target = nodes_df[nodes_df['station_name'] == row['target']]
    line = row['line']

    # This check also probably returns all stations that only have 0 crowdedness values
    # Shouldn't matter too much
    if row['crowdedness']['W'] is None or not row['crowdedness']['W'].any():
      crowdedness = 0
      print(row['source'], row['target'])
    else:
      crowdedness = row['crowdedness']['W'][frame]

    m3 = add_crowdedness_edge(m3,
      [source['latitude'].iloc[0], source['longitude'].iloc[0]],
      [target['latitude'].iloc[0], target['longitude'].iloc[0]],
      line, int(crowdedness)
    )
  return m3

m = folium.Map(location=[35.712654, 139.7618983], zoom_start=12, tiles='CartoDB Positron')

add_edges_from_frame(m, 6)

map_images = []
temp_dir = tempfile.mkdtemp()

def generate_map_and_screenshot(m2, driver, frame, images):
  m2 = add_edges_from_frame(m2, frame = frame)

  map_file = os.path.join(temp_dir, f"frame_{frame}.html")
  m2.save(map_file)

  driver.get(f'file://{map_file}')
  driver.maximize_window()
  time.sleep(2)
  screenshot_file = os.path.join(temp_dir, f"frame_{frame}.png")
  driver.save_screenshot(screenshot_file)

  image = Image.open(screenshot_file)

  draw = ImageDraw.Draw(image)
  text = f"Time {(frame // 2) + 5}:00" if frame % 2 == 0 else f"Time {(frame // 2) + 5}:30"
  position = (10, 10)  # Adjust the position (x, y) of the text
  draw.text(position, text, font=font, fill=text_color)

  display(image)

  images.append(image)
  return images

driver = init_selelium()

m420 = folium.Map(location=[35.712654, 139.7618983], zoom_start=12.5, tiles='CartoDB Positron')
generate_map_and_screenshot(m420, driver, 37, map_images)

num_frames = 38 # There are only some edges that have data after 23:30
for frame in range(num_frames):
    m2420 = folium.Map(location=[35.712654, 139.7618983], zoom_start=12.5, tiles='CartoDB Positron')
    map_images = generate_map_and_screenshot(m2420, driver, frame, map_images)
driver.quit()

width = 1920
height = 1080

fig = plt.figure(figsize = (16, 9))

ax = plt.gca()
ax.axis('off')

artists = []

for image in map_images:
  artist = plt.imshow(image)
  artists.append([artist])

animation = ArtistAnimation(fig, artists, interval=1000, blit=True)
animation.save('folium_animation.gif', writer='pillow')

for file in os.listdir(temp_dir):
    os.remove(os.path.join(temp_dir, file))
os.rmdir(temp_dir)

## OD Data Visualization
"""

import matplotlib.pyplot as plt
from matplotlib.animation import ArtistAnimation
from PIL import Image, ImageDraw, ImageFont

map_images = []
temp_dir = tempfile.mkdtemp()

# driver = init_selelium()

font = ImageFont.truetype('Roboto-Regular.ttf', size = 42)
text_color = (0, 0, 0)

def generate_images(driver, frame, images):
  m = folium.Map(location=[35.712654, 139.7618983], zoom_start=12.5, tiles='CartoDB Positron')
  m = add_influx_nodes(m, frame = frame)

  map_file = os.path.join(temp_dir, f"frame_{frame}.html")
  m.save(map_file)

  driver.get(f'file://{map_file}')
  driver.maximize_window()
  time.sleep(2)

  screenshot_file = os.path.join(temp_dir, f"frame_{frame}.png")
  driver.save_screenshot(screenshot_file)

  image = Image.open(screenshot_file)

  draw = ImageDraw.Draw(image)
  text = f"Time {(frame // 2) + 5}:00" if frame % 2 == 0 else f"Time {(frame // 2) + 5}:30"
  position = (10, 10)  # Adjust the position (x, y) of the text
  draw.text(position, text, font=font, fill=text_color)

  display(image)

  images.append(image)
  return images

num_frames = 40

for frame in range(num_frames):
    map_images = generate_images(driver, frame, map_images)

driver.quit()

width = 1920
height = 1080

fig = plt.figure(figsize = (16, 9))

ax = plt.gca()
ax.axis('off')

artists = []

for image in map_images:
  artist = plt.imshow(image)
  artists.append([artist])

animation = ArtistAnimation(fig, artists, interval=1000, blit=True)
animation.save('folium_animation.gif', writer='pillow')

for file in os.listdir(temp_dir):
    os.remove(os.path.join(temp_dir, file))
os.rmdir(temp_dir)